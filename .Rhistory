legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 9),
axis.title = element_text(size = 13))+
scale_color_manual(values=colores, labels=c("Fieles","PP","Sumar","BAI"))
# Si añado este gráfico, no hay que eliminar de la base de datos ningún partido, porque si no no llega al 100% y no se ve bien.
ggplot(data = cruce_psoe, aes(x=y, y=Freq,color=intencion, group=intencion, fill=intencion)) +
theme_classic()+
labs(x="Mes de la encuesta",
y="Transferencia de votos",
caption = "Transferencias de votos de los votantes del PSOE el 23J\nFuente: elaboración propia a partir de los datos de 40db")+
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 9),
axis.title = element_text(size = 13))+
geom_area(alpha=0.5, linetype=1, lwd=1.1)+
scale_fill_manual(values=colores, labels=c("Fieles","PP","Sumar","BAI")) +  # Colores para el relleno
scale_color_manual(values = colores, labels=c("Fieles","PP","Sumar","BAI"))    # Colores para el borde
pp <- todo %>%
filter(recuerdo == 2)
cruce_pp <- tabla(pp$intencion,pp$mes)
cruce_pp
cruce_pp <- as.data.frame.table(cruce_pp) %>%
filter(x %in% c("PSOE","PP","Vox","BAI")) %>%
mutate(intencion=fct_relevel(x, c("PP","PSOE","Vox","BAI")),
y=fct_relevel(y,c("Noviembre-23","Marzo-24","Julio-24","Octubre-24")))
ggplot(data = cruce_pp, aes(x=y, y=Freq, color=intencion, group=intencion)) +
geom_hline(yintercept = seq(0, 80, by = 10), color = "lightgrey", alpha = 0.5)+
geom_line(linewidth=1.1, linetype=4)+
theme_classic()+
labs(x="Mes de la encuesta",
y="Transferencia de votos",
caption = "Transferencias de votos de los votantes del PP el 23J\nFuente: elaboración propia a partir de los datos de 40db")+
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 9),
axis.title = element_text(size = 13))+
scale_color_manual(values=colores, labels=c("Fieles","PSOE","Vox","BAI"))
ggplot(data = cruce_pp, aes(x=y, y=Freq,color=intencion, group=intencion, fill=intencion)) +
theme_classic()+
labs(x="Mes de la encuesta",
y="Transferencia de votos",
caption = "Transferencias de votos de los votantes del PP el 23J\nFuente: elaboración propia a partir de los datos de 40db")+
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 9),
axis.title = element_text(size = 13))+
geom_area(alpha=0.5, linetype=1, lwd=1.1)+
scale_fill_manual(values=colores, labels=c("Fieles","PSOE","Vox","BAI")) +  # Colores para el relleno
scale_color_manual(values = colores, labels=c("Fieles","PSOE","Vox","BAI"))    # Colores para el borde
vox <- todo %>%
filter(recuerdo == 3)
cruce_voxt <- tabla(vox$intencion, vox$mes)
cruce_voxt
cruce_vox <- as.data.frame.table(cruce_voxt) %>%
filter(x %in% c("PP","Vox","BAI","SALF")) %>%
mutate(intencion=fct_relevel(x, c("Vox","PP","SALF","BAI")),
# Hay que transformarla de factor a caracter para poder hacer después las condiciones lógicas con sus categorías dentro del ifelse.
y = as.character(y),
# Como no empiezan a preguntar por SALF hasta julio, se eliminan los casos anteriores para que en el gráfico la línea del partido empieze en julio y no desde noviembre, pero estando en el 0.
Freq = ifelse(intencion == "SALF" & (y=="Noviembre-23" | y=="Marzo-24"), NA, Freq),
y=fct_relevel(y,c("Noviembre-23","Marzo-24","Julio-24","Octubre-24")))%>%
filter(!(intencion == "SALF" & is.na(Freq)))
ggplot(data = cruce_vox, aes(x=y, y=Freq, color=intencion, group=intencion)) +
geom_hline(yintercept = seq(0, 80, by = 10), color = "lightgrey", alpha = 0.5)+
geom_line(linewidth=1.1, linetype=1)+
theme_classic()+
labs(x="Mes de la encuesta",
y="Transferencia de votos",
caption = "Transferencias de votos de los votantes de Vox el 23J\nFuente: elaboración propia a partir de los datos de 40db")+
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 9),
axis.title = element_text(size = 13))+
scale_color_manual(values=colores, labels=c("Fieles","PP","SALF","BAI"))
sumar <- todo %>%
filter(recuerdo == 4)
cruce_sumart <- tabla(sumar$intencion, sumar$mes)
cruce_sumart
cruce_sumar <- as.data.frame.table(cruce_sumart) %>%
filter(x %in% c("PSOE","Podemos","Sumar","BAI")) %>%
mutate(intencion=fct_relevel(x, c("Sumar","Podemos","PSOE","BAI")),
y = as.character(y),
Freq = ifelse(intencion == "Podemos" & (y=="Noviembre-23" | y=="Marzo-24"), NA, Freq),
y=fct_relevel(y,c("Noviembre-23","Marzo-24","Julio-24","Octubre-24")))%>%
filter(!(intencion == "Podemos" & is.na(Freq)))
ggplot(data = cruce_sumar, aes(x=y, y=Freq, color=intencion, group=intencion)) +
geom_hline(yintercept = seq(0, 80, by = 10), color = "lightgrey", alpha = 0.5)+
geom_line(linewidth=1.1, linetype=1)+
theme_classic()+
labs(x="Mes de la encuesta",
y="Transferencia de votos",
caption = "Transferencias de votos de los votantes del PP el 23J\nFuente: elaboración propia a partir de los datos de 40db")+
theme(
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 9),
axis.title = element_text(size = 13))+
scale_color_manual(values=colores, labels=c("Fieles","Podemos","PSOE","BAI"))
mediano <- todo  %>%
filter(ideol == 5)
cruce_medianot <- tabla(mediano$intencion, mediano$mes)
cruce_medianot
cruce_mediano <- as.data.frame.table(cruce_medianot) %>%
mutate(intencion=fct_relevel(x, c("BAI","PP","PSOE","Vox","Sumar","Podemos","SALF","Otros")),
y=fct_relevel(y,c("Noviembre-23","Marzo-24","Julio-24","Octubre-24")))
DatawRappr::dw_data_to_chart(cruce_mediano, "gTjJV")
DatawRappr::datawrapper_auth(api_key = Sys.getenv("EOuMEqJbpRQpCyPgwI3dfDGDHZsMdnjuzCqKbMXX7BRx22FXSbdDiATTCFBqAIf2"), overwrite = TRUE)
DatawRappr::dw_test_key()
Sys.getenv("EOuMEqJbpRQpCyPgwI3dfDGDHZsMdnjuzCqKbMXX7BRx22FXSbdDiATTCFBqAIf2")
DatawRappr::datawrapper_auth(api_key ="EOuMEqJbpRQpCyPgwI3dfDGDHZsMdnjuzCqKbMXX7BRx22FXSbdDiATTCFBqAIf2", overwrite = TRUE)
DatawRappr::dw_test_key()
DatawRappr::dw_data_to_chart(datos_grafico, chart_id)
DatawRappr::dw_data_to_chart(datos_grafico, "gTjJV")
DatawRappr::dw_data_to_chart(cruce_mediano, "gTjJV")
cruce_mediano <- as.data.frame.table(cruce_medianot) %>%
mutate(intencion=fct_relevel(x, c("BAI","PP","PSOE","Vox","Sumar","Podemos","SALF","Otros")),
y=fct_relevel(y,c("Noviembre-23","Marzo-24","Julio-24","Octubre-24"))) %>%
select(-x)
DatawRappr::dw_data_to_chart(cruce_mediano, "gTjJV")
crece_mediano_dw <- cruce_mediano %>% pivot_wider(names_from = intencion,values_from = Freq)
DatawRappr::dw_data_to_chart(cruce_mediano, "gTjJV")
DatawRappr::dw_data_to_chart(cruce_mediano_dw, "gTjJV")
crece_mediano_dw <- cruce_mediano %>% pivot_wider(names_from = intencion,values_from = Freq)
DatawRappr::dw_data_to_chart(cruce_mediano_dw, "gTjJV")
cruce_mediano_dw <- cruce_mediano %>% pivot_wider(names_from = intencion,values_from = Freq)
DatawRappr::dw_data_to_chart(cruce_mediano_dw, "gTjJV")
View(crece_mediano_dw)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = intencion,values_from = Freq) %>%
mutate(Otros==Otros+Podemos)
View(crece_mediano_dw)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = intencion,values_from = Freq) %>%
mutate(Otros==Otros+Podemos) %>%
select(-Podmeos)
cruce_mediano <- as.data.frame.table(cruce_medianot) %>%
mutate(intencion=fct_relevel(x, c("BAI","PP","PSOE","Vox","Sumar","Podemos","SALF","Otros")),
y=fct_relevel(y,c("Noviembre-23","Marzo-24","Julio-24","Octubre-24"))) %>%
select(-x)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = intencion,values_from = Freq) %>%
mutate(Otros==Otros+Podemos) %>%
select(-Podmeos)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = intencion,values_from = Freq) %>%
mutate(Otros==Otros+Podemos)
View(cruce_mediano_dw)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = intencion,values_from = Freq) %>%
mutate(Otros=Otros+Podemos)
View(cruce_mediano_dw)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = intencion,values_from = Freq) %>%
mutate(Otros=Otros+Podemos) %>%
select(-Podemos)
View(cruce_mediano_dw)
View(cruce_mediano)
View(cruce_mediano)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq)
View(cruce_mediano_dw)
View(cruce_mediano_dw)
mutate(intencion=ifelse(intencion=="Otros",("Podemos"+"Otros"),intencion)
cruce_mediano_dw <- cruce_mediano %>%
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
mutate(intencion=ifelse(intencion=="Podemos","Otros",intencion))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
mutate(intencion=ifelse(intencion %in% C("Podemos","Otros"),"Otros",intencion))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
mutate(intencion=ifelse(intencion %in% c("Podemos","Otros"),"Otros",intencion))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
mutate(Podemos_Otros = Podemos + Otros)
View(cruce_mediano)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos"))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(x, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")))
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")),
M1=julio24,
M2=marzo24,
M3=nov23,
M4=oct)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")),
M1=julio24,
M2=marzo24,
M3=nov23,
M4=octubre24)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")),
M1=Julio-24,
M2=Marzo-24,
M3=Noviembre-23,
M4=Octubre-24)
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")),
M1="Julio-24",
M2="Marzo-24",
M3="Noviembre-23",
M4="Octubre-24")
cruce_mediano_dw <- cruce_mediano %>%
pivot_wider(names_from = y,values_from = Freq) %>%
filter(!(intencion=="Podemos")) %>%
mutate(intencion=fct_relevel(intencion, c("BAI","PP","PSOE","Vox","Sumar","SALF","Otros")),
M1=Julio-24,
M2=Marzo-24,
M3=Noviembre-23,
M4=Octubre-24)
colnames(cruce_mediano)
colnames(cruce_mediano_dw)
var_cis <- c("intencion", "recuerdo", "ideol", "Sanchez", "Feijoo", "Diaz", "Abascal", "confianza","mes")
cisenero <- read_sav("cis/01_23_1_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Enero") %>%
select(all_of(var_cis))
setwd("C:/Users/Lenovo/OneDrive/Documentos/0 - Master/Elecciones y votantes/2_trabajos/ejercicio1")
library(pacman)
p_load(tidyverse,haven,gmodels)
var_cis <- c("intencion", "recuerdo", "ideol", "Sanchez", "Feijoo", "Diaz", "Abascal", "confianza","mes")
cisenero <- read_sav("cis/01_23_1_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Enero") %>%
select(all_of(var_cis))
cisfebrero <- read_sav("cis/01_23_2_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Febrero") %>%
select(all_of(var_cis))
cismarzo <- read_sav("cis/01_23_3_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Marzo") %>%
select(all_of(var_cis))
cisabril <- read_sav("cis/01_23_4_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Abril") %>%
select(all_of(var_cis))
cismayo <- read_sav("cis/01_23_5_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Mayo") %>%
select(all_of(var_cis))
cisjunio <- read_sav("cis/01_23_6_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza = CONFIANZAPTE) %>%
mutate(mes="Junio") %>%
select(all_of(var_cis))
cis <- bind_rows(cisenero,cisfebrero,cismarzo,cisabril,cismayo,cisjunio) %>%
mutate(Sanchez=ifelse(Sanchez %in% c(98,99),NA,Sanchez),
Feijoo=ifelse(Feijoo %in% c(98,99),NA,Feijoo),
Diaz=ifelse(Diaz %in% c(98,99),NA,Diaz),
Abascal=ifelse(Abascal %in% c(98,99),NA,Abascal),
confianzagob=ifelse(confianza %in% c(8,9,0),NA,confianza),
ideol=ifelse(ideol >= 98,NA,ideol),
intencion = case_when(
intencion == 1 ~ "PSOE",
intencion == 2 ~ "PP",
intencion == 3 ~ "VOX",
intencion %in% c(4,7,21,1001) ~ "Sumar (UP+MP)",
is.na(intencion) ~ NA,
intencion == 9999 ~ NA,
intencion %in% c(8996:9998) ~ "BAI",
T ~ "Otros") %>%
as.factor(),
recuerdo=case_when(
recuerdo == 1 ~ "PSOE",
recuerdo == 2 ~ "PP",
recuerdo == 3 ~ "Vox",
recuerdo == 5 ~ "Cs",
recuerdo %in% c(4,7,903,1202,1001) ~ "Unidas Podemos + Más País", #MP es el 7 por si mejor lo quiero dejar por separado
is.na(intencion) ~ NA,
intencion %in% c(0,9999) ~ NA,
intencion %in% c(8996:9998) ~ "BAI",
T ~ "Otros") %>%
as.factor())
write_dta(cis, "cis_junto.dta")
View(cis)
table(cis$recuerdo, is.na("ifany"))
cisfebrero <- read_sav("cis/01_23_2_cis.sav") %>%
rename(intencion = INTENCIONGR,
recuerdo = RECUVOTOGR,
ideol = ESCIDEOL,
Sanchez = VALORALIDERES_1,
Feijoo = VALORALIDERES_2,
Diaz = VALORALIDERES_3,
Abascal = VALORALIDERES_4,
confianza=CONFIANZAPTE) %>%
mutate(mes="Febrero") %>%
select(all_of(var_cis))
table(cis$recuerdo, useNA("ifany"))
table(cis$intencion, useNA("ifany"))
table(cis$intencion, useNA="ifany")
setwd("C:/Users/Lenovo/OneDrive/Escritorio/Apuntes_R")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
fig.align = 'center', # Para que los gráficos de los comandos estén centrados en la página
out.width = '60%') # Para modificar el tamaño de los gráficos (en este caso hacerlos algo más pequeños)
qog2017 <- read_dta("00_datos/QoG_basic_2017.dta")
library(haven)
qog2017 <- read_dta("00_datos/QoG_basic_2017.dta")
dim(qog2017)
qog2017 <- qog2017 %>%
mutate(cpi = ti_cpi,
gdp = mad_gdppc)
summary(qog2017$cpi)
qog2017 <- qog2017 %>%
mutate(cpi = ti_cpi,
gdp = mad_gdppc)
library(tidyverse)
qog2017 <- qog2017 %>%
mutate(cpi = ti_cpi,
gdp = mad_gdppc)
summary(qog2017$cpi)
summary(qog2017$gdp)
myvars <- c("cpi", "gdp")          # creo un vector con las variables de interés
qog2017.red<-qog2017[myvars]       # creo un nuevo dataframe con las variables de interés
qog2017.red<- na.omit(qog2017.red) # elimino los casos perdidos del nuevo dataframe
summary(qog2017.red)               # compruebo que el nuevo dataset contiene únicamente las variables de interés
dim(qog2017.red)
# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)
set.seed(1)
# Creamos un id para las filas
qog2017.red <- qog2017.red %>%
rownames_to_column(var = "row_id")
# Dividimos el dataset en 70% para entrenamiento y 30% para prueba
train.data <- qog2017.red %>%
sample_frac(0.7) # selecciona aleatoriamente el 70% de las filas del dataset.
# El test set son las filas que no están en el train set
test.data <- qog2017.red %>%
anti_join(train.data, by = "row_id") # se usa para obtener el 30% restante (las filas que no están en                                            el set de entrenamiento), asegurando que no haya filas duplicadas.
modelo1 <- lm(cpi ~ gdp, data=train.data)
print(modelo1)
# Usamos el modelo para predecir los valores de CPI en test.data y guardamos el resultado en una nueva columna yhat1
test.data <- test.data %>%
mutate(yhat1 = predict(modelo1, newdata = test.data))
# Visualizamos los primeros valores de la columna de predicciones
head(test.data$yhat1)
install.packages("caret")
library(caret)
data.frame(R2.m1 = R2(test.data$yhat1, test.data$cpi),
RMSE.m1 = RMSE(test.data$yhat1, test.data$cpi),
MAE.m1 = MAE(test.data$yhat1, test.data$cpi))
RMSE(test.data$yhat1, test.data$cpi)/mean(test.data$cpi)
train.control <- trainControl(method="LOOCV") # Con la función trainControl definimos el tipo de método (loocv en este caso)
# Entrenamos el modelo
modelo2 <- train(cpi ~., data=qog2017.red, method="lm", trControl=train.control)
qog2017.red$RMSE.m2<-modelo2$results$RMSE
head(qog2017.red)
mean(qog2017.red$RMSE.m2/mean(qog2017.red$cpi))
modelo2 <- train(cpi ~., data=qog2017.red, method="lm", trControl=train.control) # ~. significa que utilice todas las varaibles del dataset, en lugar de tener que escribirlas todas una por una.
print(modelo2)
# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)
set.seed(777)
# Creamos un id para las filas
qog2017.red <- qog2017.red %>%
rownames_to_column(var = "row_id")
# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)
set.seed(777)
# Creamos un id para las filas
qog2017.red <- qog2017.red %>%
rownames_to_column(var = "row_id")
# Dividimos el dataset en 70% para entrenamiento y 30% para prueba
train.data <- qog2017.red %>%
sample_frac(0.7) # selecciona aleatoriamente el 70% de las filas del dataset.
# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)
set.seed(777)
# Creamos un id para las filas
qog2017.red <- qog2017.red %>%
rownames_to_column(var = "row_id")
# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)
set.seed(30)
# Creamos un id para las filas
qog2017.red <- qog2017.red %>%
rownames_to_column(var = "row_id")
qog2017 <- read_dta("00_datos/QoG_basic_2017.dta")
dim(qog2017)
qog2017 <- qog2017 %>%
mutate(cpi = ti_cpi,
gdp = mad_gdppc)
summary(qog2017$cpi)
summary(qog2017$gdp)
myvars <- c("cpi", "gdp")          # creo un vector con las variables de interés
qog2017.red<-qog2017[myvars]       # creo un nuevo dataframe con las variables de interés
qog2017.red<- na.omit(qog2017.red) # elimino los casos perdidos del nuevo dataframe
summary(qog2017.red)               # compruebo que el nuevo dataset contiene únicamente las variables de interés
dim(qog2017.red)
# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)
set.seed(30)
# Creamos un id para las filas
qog2017.red <- qog2017.red %>%
rownames_to_column(var = "row_id")
# Dividimos el dataset en 70% para entrenamiento y 30% para prueba
train.data <- qog2017.red %>%
sample_frac(0.7) # selecciona aleatoriamente el 70% de las filas del dataset.
# El test set son las filas que no están en el train set
test.data <- qog2017.red %>%
anti_join(train.data, by = "row_id") # se usa para obtener el 30% restante (las filas que no están en                                            el set de entrenamiento), asegurando que no haya filas duplicadas.
modelo1 <- lm(cpi ~ gdp, data=train.data)
print(modelo1)
# Usamos el modelo para predecir los valores de CPI en test.data y guardamos el resultado en una nueva columna yhat1
test.data <- test.data %>%
mutate(yhat1 = predict(modelo1, newdata = test.data))
# Visualizamos los primeros valores de la columna de predicciones
head(test.data$yhat1)
head(test.data)
library(caret)
data.frame(R2.m1 = R2(test.data$yhat1, test.data$cpi),
RMSE.m1 = RMSE(test.data$yhat1, test.data$cpi),
MAE.m1 = MAE(test.data$yhat1, test.data$cpi))
RMSE(test.data$yhat1, test.data$cpi)/mean(test.data$cpi)
# Definimos el training control para 10 folders
set.seed(123)
train.control <- trainControl(method="cv", number=10)  # en este caso, usamos el método "cv"
# Entrenamos el modelo
modelo3 <- train(cpi ~., data=qog2017.red, method="lm", trControl=train.control)
print(modelo3)
qog2017.red$RMSE.m3<-modelo3$results$RMSE         # extraemos RMSE del modelo3
head(qog2017.red)                                 # comprobamos que se ha añadido al data.frame
mean(qog2017.red$RMSE.m3/mean(qog2017.red$cpi))   # calculamos la tasa del error de predicción
# Definimos el training control para 10 folders
set.seed(123)
train.control <- trainControl(method="cv", number=20)  # en este caso, usamos el método "cv"
# Entrenamos el modelo
modelo3 <- train(cpi ~., data=qog2017.red, method="lm", trControl=train.control)
print(modelo3)
qog2017.red$RMSE.m3<-modelo3$results$RMSE         # extraemos RMSE del modelo3
head(qog2017.red)                                 # comprobamos que se ha añadido al data.frame
mean(qog2017.red$RMSE.m3/mean(qog2017.red$cpi))   # calculamos la tasa del error de predicción
train.control <- trainControl(method="cv", number=110)  # en este caso, usamos el método "cv"
# Entrenamos el modelo
modelo3 <- train(cpi ~., data=qog2017.red, method="lm", trControl=train.control)
# Entrenamos el modelo
modelo3 <- train(cpi ~., data=qog2017.red, method="lm", trControl=train.control)
print(modelo3)
qog2017.red$RMSE.m3<-modelo3$results$RMSE         # extraemos RMSE del modelo3
head(qog2017.red)                                 # comprobamos que se ha añadido al data.frame
mean(qog2017.red$RMSE.m3/mean(qog2017.red$cpi))   # calculamos la tasa del error de predicción
