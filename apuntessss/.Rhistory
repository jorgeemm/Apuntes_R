esc_izq=esc_comunistas+esc_feministas+esc_verdes+esc_socialistas+esc_postcom+esc_socdem,
voto_izq=voto_comunistas+voto_feministas+voto_verdes+voto_socialistas+voto_postcom+voto_socdem) %>%
select(cname,ccode,year,br_pvote,esc_comunistas,esc_feministas,esc_verdes,esc_socialistas,esc_postcom,esc_socdem,voto_comunistas,voto_feministas,voto_verdes,voto_verdes,voto_socialistas,voto_socialistas,voto_postcom,voto_socdem,esc_izq,voto_izq)
datos_reg <- inner_join(clea_limpio, qog_limpio, by = c("ccode", "year"))
View(datos_reg)
datos_reg <- na.omit(datos_reg)
library(e1071)
reg <- lm(voto_iz~nacion, datos_reg)
reg <- lm(voto_izq~nacion, datos_reg)
summary(reg)
reg <- lm(voto_izq~nacion + year + ccode, datos_reg)
summary(reg)
reg2 <- lm(esc_izq~nacion + year + ccode, datos_reg)
summary(reg2)
library(haven)
library(tidyverse)
library(e1071)
qog <- read_dta("~/0 - Master/Sistemas electorales/1_presentación/qog.dta")
clea <- read_dta("~/0 - Master/Sistemas electorales/1_presentación/clea_nacionalizacion/clea_enp_lc_20230215_national.level.dta")
qog_filtrado<- qog %>%
inner_join(clea, by = c("ccode" = "ctr", "year" = "yr"))
clea_filtrado <- clea %>%
distinct(ctr, yr, .keep_all = TRUE) %>%
inner_join(qog_filtrado %>% distinct(ccode, year, .keep_all = TRUE),
by = c("ctr" = "ccode", "yr" = "year"))
clea_limpio <- clea_filtrado %>%
mutate(nacion=ifelse(PSNS.x==-990,NA,PSNS.x), # Nivel de nacionalización
ccode=ctr,
year=yr,
enp=ENP_nat.x,
cname=ctr_n.x,
inflacion=ifelse(inflation1.x==-990,NA,inflation1.x)) %>% # Número efectivo de partidos
select(cname,ccode,year,nacion,inflacion)
qog_limpio <- qog_filtrado %>%
mutate(proporcional=br_pvote,   # Si es proporcional el sistema (1)
esc_comunistas=cpds_lcom,
esc_feministas=cpds_lfe,
esc_verdes=cpds_lg,
esc_socialistas=cpds_lls,
esc_postcom=cpds_lpc,
esc_socdem=cpds_ls,
voto_comunistas=cpds_vcom,
voto_feministas=cpds_vfe,
voto_verdes=cpds_vg,
voto_socialistas=cpds_vls,
voto_postcom=cpds_vpcom,
voto_socdem=cpds_vs,
esc_izq=esc_comunistas+esc_feministas+esc_verdes+esc_socialistas+esc_postcom+esc_socdem,
voto_izq=voto_comunistas+voto_feministas+voto_verdes+voto_socialistas+voto_postcom+voto_socdem) %>%
select(cname,ccode,year,br_pvote,esc_comunistas,esc_feministas,esc_verdes,esc_socialistas,esc_postcom,esc_socdem,voto_comunistas,voto_feministas,voto_verdes,voto_verdes,voto_socialistas,voto_socialistas,voto_postcom,voto_socdem,esc_izq,voto_izq)
datos_reg <- inner_join(clea_limpio, qog_limpio, by = c("ccode", "year"))
datos_reg <- na.omit(datos_reg)
reg1 <- lm(voto_izq~nacion + year + ccode, datos_reg)
summary(reg1)
reg2 <- lm(esc_izq~nacion + year + ccode, datos_reg)
summary(reg2)
reg1 <- lm(voto_izq~inflacion + year + ccode, datos_reg)
summary(reg1)
reg4 <- lm(esc_izq~inflacion + year + ccode, datos_reg)
summary(reg4)
scatter.smooth(x=datos_reg$inflacion, y=datos_reg$voto_izq)
library(pacman)
p_load(haven, tidyverse, e1071)
library(haven)
data <- read_sav("C:/Users/Lenovo/Downloads/MD3135/3135.sav")
View(data)
class(data$P12)
table(data$P12, useNA = "ifany")
data <- data %>%
mutate(transparencia=ifelse(P12>11,NA,P12))
table(data$transparencia, useNA = "ifany")
class(data$P1)
table(data$P1, useNA = "ifany")
data <- data %>%
mutate(cumpli_leyes=ifelse(P1>3,NA,P1))
table(data$cumpli_leyes, useNA = "ifany")
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA) %>%
as.factor(levels = c(0,1),
labels = c("actuar según conciencia en ocasiones", "Cumplir leyes siempre")))
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA) %>%
as.factor(cumpli_leyes,
levels = c(0,1),
labels = c("actuar según conciencia en ocasiones", "Cumplir leyes siempre")))
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA) %>%
cumpli_leyes=as.factor(cumpli_leyes,
"
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA) %>%
cumpli_leyes=as.factor(cumpli_leyes,
levels = c(0,1),
labels = c("actuar según conciencia en ocasiones", "Cumplir leyes siempre")))
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA) %>%
cumpli_leyes=as.factor(cumpli_leyes,
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA),
cumpli_leyes=as.factor(cumpli_leyes,
levels = c(0,1),
labels = c("Actuar según conciencia en ocasiones", "Cumplir leyes siempre")))
data <- data %>%
mutate(cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA),
cumpli_leyes=as.factor(cumpli_leyes,
levels = c(0,1),
labels = c("Actuar según conciencia en ocasiones", "Cumplir leyes siempre")))
data <- data %>%
mutate(
cumpli_leyes=case_when(
P1==1~1,
P1==2~0,
T ~ NA),
cumpli_leyes=factor(cumpli_leyes,
levels = c(0,1),
labels = c("Actuar según conciencia en ocasiones", "Cumplir leyes siempre")))
table(data$cumpli_leyes, useNA = "ifany")
class(data$P1602)
table(data$P1602, useNA = "ifany")
data <- data %>%
mutate(
entender_pol=case_when(
P1602 %in% c(1,2)~1,
P1602 %in% c(2,4,5)~0,
T ~ NA),
entender_pol=factor(entender_pol,
levels = c(0,1),
labels = c("Mucho", "Poco o nada")))
table(data$entender_pol, useNA = "ifany")
table(data$P90, useNA = "ifany")
data <- data %>%
mutate(ideol=ifelse(P90>11,NA,P90))
table(data$ideol, useNA = "ifany")
data <- data %>%
mutate(ideol_rec=case_when(
ideol %in% c(0:3)~"Izquierda",
ideol %in% c(4:6)~"Centro",
ideol %in% c(7:10)~"Derecha",
T ~ NA
) %>% as.factor())
table(data$ideol_rec, useNA = "ifany")
data <- data %>%
mutate(
dindicado=case_when(
P1602 %in% c(1,2)~1,
P1602==3~0,
T ~ NA),
sindicado=factor(sindicado,
levels = c(0,1),
labels = c("No", "Sí")))
data <- data %>%
mutate(
dindicado=case_when(
P88 %in% c(1,2)~1,
P88==3~0,
T ~ NA),
sindicado=factor(sindicado,
levels = c(0,1),
labels = c("No", "Sí")))
data <- data %>%
mutate(
dindicado=case_when(
P88 %in% c(1,2)~1,
P88==3~0,
T ~ NA),
sindicado=factor(sindicado,
levels = c(0,1),
labels = c("No", "Sí")))
data <- data %>%
mutate(
sindicado=case_when(
P88 %in% c(1,2)~1,
P88==3~0,
T ~ NA),
sindicado=factor(sindicado,
levels = c(0,1),
labels = c("No", "Sí")))
table(data$sindicado, useNA = "ifany")
table(data$P66, useNA = "ifany")
data <- data %>%
mutate(
hombre=case_when(
P66==1~1,
P66==2~0,
T ~ NA),
hombre=factor(hombre,
levels = c(0,1),
labels = c("Mujer", "Hombre")))
table(data$hombre, useNA = "ifany")
datos <- datos %>%
rename(edad=EDAD)
data <- data %>%
rename(edad=EDAD)
source("00_datos/source.r")
# Intención de voto
table(datos$INTENCIONG)
# Intención voto VOX
datos <- datos %>%
mutate(
intvox = case_when(
INTENCIONG == 3 ~ 1,
INTENCIONG >= 9977 ~ NA,
TRUE ~ 0))
table(datos$intvox, useNA = "ifany")
datos_log <- datos %>%
select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
summary(datos_log)
library(MASS)
m.vox <- glm(intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19, data = datos_log, family = "binomial")
summary(m.vox)
confint(m.vox)
exp(coef(m.vox))
exp(cbind(OR = coef(m.vox), confint(m.vox)))
data1 <- with(datos_log, data.frame(ideol = mean(ideol), recuerdo19 = c("PSOE","PP","VOX","Podemos","Ciudadanos", "Más Madrid", "Otros", "En blanco"), edad = mean(edad), hombre="Hombre", estudios_universitarios="con ES", ecoesp="negativa"))
head(data1, 8)
data1$probpredichas_vox<- predict(m.vox, newdata = data1, type = "response")
data1 <- with(datos_log, data.frame(ideol = mean(ideol), recuerdo19 = c("PSOE","PP","VOX","Podemos","Ciudadanos", "Más Madrid", "Otros", "En blanco"), edad = mean(edad), hombre="Hombre", estudios_universitarios="con EU", ecoesp="negativa"))
head(data1, 8)
data1$probpredichas_vox<- predict(m.vox, newdata = data1, type = "response")
data1[, c(2, 7)]  #le pido que muestre todas las filas de las columnas 2 (recuerdo voto) y 7(probabilidad predicha)
source("00_datos/source.r")
# Intención de voto
table(datos$INTENCIONG)
# Intención voto VOX
datos <- datos %>%
mutate(
intvox = case_when(
INTENCIONG == 3 ~ 1,
INTENCIONG >= 9977 ~ NA,
TRUE ~ 0))
table(datos$intvox, useNA = "ifany")
datos_log <- datos %>%
select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
summary(datos_log)
library(MASS)
m.vox <- glm(intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19, data = datos_log, family = "binomial")
summary(m.vox)
confint(m.vox)
exp(coef(m.vox))
exp(cbind(OR = coef(m.vox), confint(m.vox)))
data1 <- with(datos_log, data.frame(ideol = mean(ideol), recuerdo19 = c("PSOE","PP","VOX","Podemos","Ciudadanos", "Más Madrid", "Otros", "En blanco"), edad = mean(edad), hombre="Hombre", estudios_universitarios="con EU", ecoesp="negativa"))
head(data1, 8)
data1$probpredichas_vox<- predict(m.vox, newdata = data1, type = "response")
data1[, c(2, 7)]  #le pido que muestre todas las filas de las columnas 2 (recuerdo voto) y 7(probabilidad predicha)
library(margins)
margins_vox <- margins(m.vox)
# Resumen
summary_margins <- summary(margins_vox)
summary_margins
# Convertimos el resumen en un data.frame para poder hacer un gráfico
data_to_plot <- data.frame(
factor = summary_margins$factor,
AME = summary_margins$AME,
lower = summary_margins$lower,
upper = summary_margins$upper
)
ggplot(data_to_plot, aes(x = AME, y = factor)) +
geom_point(color = "blue", size = 3) +  # Puntos para los AME
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "black") +  # Barras de error
geom_vline(xintercept = 0, linetype = "dashed", color = "grey") +  # Línea vertical en 0
labs(
title = "Average Marginal Effects (AME) with Confidence Intervals",
x = "AME",
y = "Variables"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),  # Centrar título
axis.text.y = element_text(size = 10)  # Ajustar tamaño de texto
)
library(rms)
logit.vif<- vif(m.vox)
logit.vif
library(lmtest)
logit.het<-bptest(m.vox)
logit.het
library(stargazer)
stargazer(m.vox,
type="text",
dep.var.labels=c("Voto VOX"),
covariate.labels=c("Hombre", "Estudios Universitarios", "Edad", "Valoración + economia", "Ideología", "Voto 2019: PP (cr:PSOE)", "Voto 2019: VOX (cr:PSOE)", "Voto 2019: Podemos (cr:PSOE)", "Voto 2019: Ciudadanos (cr:PSOE)", "Voto 2019: +Madrid (cr:PSOE)", "Voto 2019: Otros (cr:PSOE)", "Voto 2019: blanco (cr:PSOE)", "Constante"))
set.seed(123)
index <- 1:nrow(data)
porc_test <- 0.40
# Dividir datos
test.data <- data %>% sample_frac(porc_test)
train.data <- data %>% anti_join(test.data)
clase_real <- test.data$intvox
View(test.data)
set.seed(123)
index <- 1:nrow(datos_log)
source("00_datos/source.r")
# Intención de voto
table(datos$INTENCIONG)
# Intención voto VOX
datos <- datos %>%
mutate(
intvox = case_when(
INTENCIONG == 3 ~ 1,
INTENCIONG >= 9977 ~ NA,
TRUE ~ 0))
table(datos$intvox, useNA = "ifany")
datos_log <- datos %>%
select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
set.seed(123)
index <- 1:nrow(datos_log)
set.seed(123)
index <- 1:nrow(datos_log)
set.seed(123)
index <- 1:nrow(datos_log)
source("00_datos/source.r")
# Intención de voto
table(datos$INTENCIONG)
# Intención voto VOX
datos <- datos %>%
mutate(
intvox = case_when(
INTENCIONG == 3 ~ 1,
INTENCIONG >= 9977 ~ NA,
TRUE ~ 0))
table(datos$intvox, useNA = "ifany")
datos_log <- datos %>%
select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
datos_log <- datos %>%
select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
datos_log <- datos %>%
tidyverse::select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
datos_log <- datos %>%
dplyr::select(intvox, hombre, estudios_universitarios, edad, ecoesp, ideol, recuerdo19) %>%
drop_na()
summary(datos_log)
library(MASS)
m.vox <- glm(intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19, data = datos_log, family = "binomial")
summary(m.vox)
confint(m.vox)
exp(coef(m.vox))
exp(coef(m.vox))
exp(cbind(OR = coef(m.vox), confint(m.vox)))
data1 <- with(datos_log, data.frame(ideol = mean(ideol), recuerdo19 = c("PSOE","PP","VOX","Podemos","Ciudadanos", "Más Madrid", "Otros", "En blanco"), edad = mean(edad), hombre="Hombre", estudios_universitarios="con EU", ecoesp="negativa"))
head(data1, 8)
data1$probpredichas_vox<- predict(m.vox, newdata = data1, type = "response")
data1[, c(2, 7)]  #le pido que muestre todas las filas de las columnas 2 (recuerdo voto) y 7(probabilidad predicha)
library(margins)
margins_vox <- margins(m.vox)
# Resumen
summary_margins <- summary(margins_vox)
summary_margins
# Convertimos el resumen en un data.frame para poder hacer un gráfico
data_to_plot <- data.frame(
factor = summary_margins$factor,
AME = summary_margins$AME,
lower = summary_margins$lower,
upper = summary_margins$upper
)
library(rms)
logit.vif<- vif(m.vox)
logit.vif
library(lmtest)
logit.het<-bptest(m.vox)
logit.het
library(stargazer)
stargazer(m.vox,
type="text",
dep.var.labels=c("Voto VOX"),
covariate.labels=c("Hombre", "Estudios Universitarios", "Edad", "Valoración + economia", "Ideología", "Voto 2019: PP (cr:PSOE)", "Voto 2019: VOX (cr:PSOE)", "Voto 2019: Podemos (cr:PSOE)", "Voto 2019: Ciudadanos (cr:PSOE)", "Voto 2019: +Madrid (cr:PSOE)", "Voto 2019: Otros (cr:PSOE)", "Voto 2019: blanco (cr:PSOE)", "Constante"))
set.seed(123)
index <- 1:nrow(datos_log)
porc_test <- 0.40
# Dividir datos
test.data <- datos_log %>% sample_frac(porc_test)
train.data <- datos_log %>% anti_join(test.data)
clase_real <- test.data$intvox
library(MASS)
logit.vox <- glm(intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19, data = train.data, family = "binomial")
summary(logit.vox)
predicted_logit<- predict(logit.vox, newdata=test.data, type="response")
head(predicted_logit)
install.packages("ROCR")
library(ROCR)
# Curva ROC
pred_logit <-  prediction(predicted_logit, clase_real) # crea un objeto "predicción"
perf_logit <- performance(pred_logit, measure = "tpr", x.measure = "fpr")
par(mfrow = c(1,1))
plot(perf_logit, lty=1, col="darkgrey", main = "Logit ROC Curve")
auc.logit<- performance(pred_logit, measure = "auc", x.measure = "fpr")
auc.logit@y.values
library(randomForest)
install.packages("randomForest")
class(train.data$intvox)
library(randomForest)
# Convertimos la variable intvoto en factor (de lo contrario, da error)
train.data$intvox <- as.factor(train.data$intvox)
test.data$intvox <- as.factor(test.data$intvox)
# Entrenamos el modelo Random Forest
rf.vox <- randomForest(
intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19,
data = train.data,
ntree = 500,      # número de árboles
mtry = 2,         # número de predictores seleccionados aleatoriamente por árbol
importance = TRUE # importancia de variables
)
# Importancia de las variables
importance(rf.vox)
library(randomForest)
# Convertimos la variable intvoto en factor (de lo contrario, da error)
train.data$intvox <- as.factor(train.data$intvox)
test.data$intvox <- as.factor(test.data$intvox)
# Entrenamos el modelo Random Forest
rf.vox <- randomForest(
intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19,
data = train.data,
ntree = 500,      # número de árboles
mtry = 2,         # número de predictores seleccionados aleatoriamente por árbol
importance = TRUE # importancia de variables
)
# Importancia de las variables
importance(rf.vox)
# Calculamos los valores predichos en el conjunto de test
predicted_rf <- predict(rf.vox, newdata = test.data, type = "prob")[, 2]
# Creamos el objeto de predicción para ROC
pred_rf <- prediction(predicted_rf, clase_real) # valores predichos, valores reales
# Calculamos rendimiento (ROC)
perf_rf <- performance(pred_rf, measure = "tpr", x.measure = "fpr")
# Pintamos la curva ROC
par(mfrow = c(1,1))
plot(perf_rf, lty = 1, col = "gold", main = "Random Forest ROC Curve")
# Calculamos el AUC
auc.rf<- performance(pred_rf, measure = "auc", x.measure = "fpr")
auc.rf@y.values
library(e1071)
# Entrenamos el modelo Naive Bayes
nb_model <- naiveBayes(
intvox ~ hombre + estudios_universitarios + edad + ecoesp + ideol + recuerdo19, data = train.data)
# Calculamos los valores predichos en el conjunto de test
predicted_nb <- predict(nb_model, newdata = test.data, type = "raw")[, 2] # raw en esta librería equivale a prob en la de random.forest
# Creamos el objeto de predicción para ROC
pred_nb <- prediction(predicted_nb, clase_real) #comparar datos predichos con reales
# Calculamos el rendimiento (ROC)
perf_nb <- performance(pred_nb, measure = "tpr", x.measure = "fpr")
# Pintamos la curva ROC
par(mfrow = c(1,1)) # Configuración de un solo gráfico
plot(perf_nb, lty = 1, col = "steelblue", main = "Naive Bayes ROC Curve")
# Calculamos el AUC
auc.nb<- performance(pred_nb, measure = "auc", x.measure = "fpr")
auc.nb@y.values
par(mfrow = c(1,1))
plot(perf_logit, lty=1, col="darkgrey", main = "ROC Curves")
plot(perf_rf, lty=1, col="gold", add = TRUE)
plot(perf_nb, lty=1, col="steelblue", add = TRUE)
legend(0.4, 0.6,
c("Logit=0.920", "Random Forest=0.887", "Naive Bayes=0.916"),
lty = c(1,1,1),
bty = "n",
col=c("darkgrey", "gold","steelblue"),
cex = 0.7)
# Modelo sin ideología ni recuerdo de voto
logit2.vox <- glm(intvox ~ hombre + estudios_universitarios + edad + ecoesp, data = train.data, family = "binomial")
# Predicción
predicted_logit2<- predict(logit2.vox, newdata=test.data, type="response")
# ROC
pred_logit2 <-  prediction(predicted_logit2, clase_real)
perf_logit2<- performance(pred_logit2, measure = "tpr", x.measure = "fpr")
# AUC
auc.logit2 <- performance(pred_logit2, measure = "auc", x.measure = "fpr")
auc.logit2@y.values
par(mfrow = c(1,1))
plot(perf_logit, lty=1, col="darkgrey", main = "Logit ROC Curves")
plot(perf_logit2, lty=2, col="grey", add = TRUE)
legend(0.4, 0.6,
c("Logit=0.920", "Logit(sin ideología ni recuerdo de voto)=0.765"),
lty = c(1,2),
bty = "n",
col=c("darkgrey", "grey"),
cex = 0.7)
logit3.vox <- glm(intvox ~ hombre + estudios_universitarios + edad + I(edad^2) + ecoesp + ideol + recuerdo19,
data = train.data, family = "binomial")
summary(logit3.vox)
install.packages("jsonlite")
library(jsonlite)
spoty <- fromJSON(""C:\Users\Lenovo\Downloads\Streaming_History_Audio_2023-2024_3.json"")
spoty <- fromJSON("C:\Users\Lenovo\Downloads\Streaming_History_Audio_2023-2024_3.json)
spoty <- fromJSON("C:/Users/Lenovo/Downloads/Streaming_History_Audio_2023-2024_3.json)
spoty <- fromJSON("C:/Users/Lenovo/Downloads/Streaming_History_Audio_2023-2024_3.json)
spoty <- fromJSON("C:/Users/Lenovo/Downloads/Streaming_History_Audio_2023-2024_3.json)
spoty <- fromJSON("C:/Users/Lenovo/Downloads/Streaming_History_Audio_2023-2024_3.json)
