{"title":"Predicciones","markdown":{"yaml":{"title":"Predicciones"},"headingText":"Validación del modelo de regresión","containsRefs":false,"markdown":"\n\n```{r include=FALSE}\nsource(\"00_datos/source.R\")\n```\n\n\nHay ocasiones en las que queremos determinar la precisión de un modelo a la hora de predecir nuevas observaciones (que no se han utilizado para construir el modelo). En otras palabras, queremos estimar el error de predicción de nuestro modelo. Con **validación cruzada** nos referimos a un conjunto de métodos para medir el rendimiento de un modelo dado en nuevos conjuntos de datos de prueba.\n\nLa idea básica detrás de las técnicas de validación cruzada es la siguiente:\n\n-   Construir el modelo en un conjunto de datos de entrenamiento (*train set*)\n-   Aplicar el modelo en un nuevo conjunto de datos de prueba para hacer predicciones (*test set*)\n-   Calcular los errores de predicción. Si el modelo funciona bien en el conjunto de datos de prueba (*test set*), entonces es bueno.\n\nÉxisten diferentes métricas para cuantificar la calidad general de los modelos de regresión. Hasta ahora nos hemos centrado en el R^2^, pero hay otros como:\n\n-   El **error cuadrático medio** (RMSE), que mide el error predictivo promedio. Es decir, la diferencia promedio entre los valores observados y los valores predichos por el modelo. Cuanto más bajo sea el RMSE, mejor será el modelo.\n-   El **error absoluto medio** (MAE), una alternativa a RMSE que es menos sensible a los valores atípicos. Corresponde a la diferencia promedio, en términos absolutos, entre los resultados observados y predichos. Cuanto más bajo sea el MAE, mejor será el modelo.\n\nExisten diferentes métodos de validación cruzada para evaluar el rendimiento del modelo. A continuación, vamos a ver algunos de los más sencillos y frecuentes.\n\n## El conjunto de validación\n\nÉl método más sencillo consiste en dividir aleatoriamente los datos en dos conjuntos: un conjunto se usa para entrenar el modelo (train set) y el otro para probalo (test set).\n\nVamos a ver un ejemplo. Para ello, abrimos el dataset QoG2017 (*Quality of Government, 2017*) que ya conocemos. Como en ejemplos anteriores, renombramos nuestras 2 variables de interés:\n\n-   ti_cpi (Transparency International Corruption Perception Index) = cpi\n-   mad_gdppc (GDP per capita) = gdp\n\n```{r}\nqog2017 <- read_dta(\"00_datos/QoG_basic_2017.dta\")\n\ndim(qog2017)\n\nqog2017 <- qog2017 %>%\n  mutate(cpi = ti_cpi,\n         gdp = mad_gdppc)\n\nsummary(qog2017$cpi)\n\nsummary(qog2017$gdp)\n\n```\n\nPara que todo funcione bien **es necesario que la base de datos no contenga NAs**. Para ello, procedemos de la siguiente manera:\n\n-   Creamos un nuevo dataset que incluya únicamente las variables que nos interesan\n-   Eliminamos los casos perdidos usando la función `na.omit()` o `na.exclude()`\n\n```{r}\nmyvars <- c(\"cpi\", \"gdp\")          # creo un vector con las variables de interés\nqog2017.red<-qog2017[myvars]       # creo un nuevo dataframe con las variables de interés\nqog2017.red<- na.omit(qog2017.red) # elimino los casos perdidos del nuevo dataframe\nsummary(qog2017.red)               # compruebo que el nuevo dataset contiene únicamente las variables de interés\ndim(qog2017.red)\n```\n\nUna vez tenemos el dataset preparado, pasamos a crear el conjunto de entrenamiento y test. Hay otras muchas maneras de hacerlo y aquí hemos elegido una sencilla, pero hay otras funciones disponibles en el paquete *caret* o *caTools*.\n\n```{r}\n# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)\nset.seed(1)\n\n# Creamos un id para las filas\nqog2017.red <- qog2017.red %>%\n  rownames_to_column(var = \"row_id\")\n\n# Dividimos el dataset en 70% para entrenamiento y 30% para prueba\ntrain.data <- qog2017.red %>%\n  sample_frac(0.7) # selecciona aleatoriamente el 70% de las filas del dataset.\n\n# El test set son las filas que no están en el train set\ntest.data <- qog2017.red %>%\n  anti_join(train.data, by = \"row_id\") # se usa para obtener el 30% restante (las filas que no están en el set de entrenamiento), asegurando que no haya filas duplicadas.\n```\n\nNota: `set.seet()`establece el número inicial que se usa para generar una secuencia de números aleatorios. De esta manera, nos aseguramos de que obtener el mismo resultado cada vez que se ejecuta el mismo proceso.\n\nA continuación, estimamos el modelo de regresión con los datos de entrenamiento (train.data):\n\n```{r}\nmodelo1 <- lm(cpi ~ gdp, data=train.data)\nprint(modelo1)\n```\n\nUna vez hemos estimado el modelo en el conjunto de entrenamiento, pasamos a hacer la predicción. Es decir, usamos los parámetros obtenidos en el modelo1 para estimar yhat (valores predichos) en el conjunto de prueba (test.data):\n\n```{r}\n# Usamos el modelo para predecir los valores de CPI en test.data y guardamos el resultado en una nueva columna yhat1\ntest.data <- test.data %>%\n  mutate(yhat1 = predict(modelo1, newdata = test.data))\n\n# Visualizamos los primeros valores de la columna de predicciones\nhead(test.data$yhat1)\n```\n\nComo resultado, el dataset tiene ahora 4 columnas. El id, la variable dependiente (*cpi*), la variable independiente (*gdp*) y el valor predicho (*yhat*). Una vez tenemos estos tres valores, ya podemos calcular la calidad general del modelo de regresión.\n\n```{r}\nhead(test.data)\n```\n\nCalculamos el R^2^, el RMSE y el MAE del modelo 1:\n\n```{r}\nlibrary(caret)\ndata.frame(R2.m1 = R2(test.data$yhat1, test.data$cpi),\n           RMSE.m1 = RMSE(test.data$yhat1, test.data$cpi),\n           MAE.m1 = MAE(test.data$yhat1, test.data$cpi))\n```\n\nRMSE y el MAE se miden en la misma escala que la variable dependiente. Para tener una medida más fácilmente interpretable, dividimos RMSE por el valor promedio de la variable dependiente. De esta manera obtendremos la *tasa de error de predicción* que varía entre 0 y 1. La predicción será mejor cuanto menor sea su valor:\n\n```{r}\nRMSE(test.data$yhat1, test.data$cpi)/mean(test.data$cpi)\n```\n\nEste método de validación cruzada es útil cuando tenemos una muestra suficientemente grande para particionar. Una desventaja es que construimos el modelo a partir de fracción del conjunto de datos, posiblemente omitiendo alguna información interesante sobre los datos, lo que nos puede conducir a un mayor sesgo. Por lo tanto, la tasa de error de la prueba puede ser muy variable, dependiendo de qué observaciones se incluyen en el conjunto de entrenamiento y qué observaciones se incluyen en el conjunto de validación.\n\n## Método *Leave-one-out* (LOOCV)\n\nLa validación cruzada dejando uno fuera (método *leave-one-out)* funciona de la siguiente manera:\n\n-   Dejar un único caso fuera y construye el modelo con el resto del dataset (n-1)\n-   Valida el modelo con dicho dato, y guarda el error de predicción asociado\n-   Repite el proceso tantas veces como casos (n) tenemos\n-   Computa el error de predicción total, que es el promedio de todos los errores estimados en cada paso\n\nPara cada uno de los casos de la muestra, hace una regresión con el resto del dataset, y testea esta regresión con el que se ha quedado apartado. Este proceso se repite con todos los casos, calculando el error de todas estas regresiones y la media de ellos. Con esta forma de realizar predicciones, todos los casos son usados tanto en la muestra de entrenamiento como en la de testeo. (*No tiene por qué ser necesariamente un mejor modelo que el anterior*)\n\nVamos a ver un **ejemplo** con nuestros datos:\n\n```{r}\ntrain.control <- trainControl(method=\"LOOCV\") # Con la función trainControl definimos el tipo de método (loocv en este caso)\n# Entrenamos el modelo\nmodelo2 <- train(cpi ~., data=qog2017.red, method=\"lm\", trControl=train.control) # ~. significa que utilice todas las varaibles del dataset, en lugar de tener que escribirlas todas una por una.\nprint(modelo2)\n```\n\nLa función `print()` nos devuelve el resultado del modelo calculado con el método LOOCV. Como veis, nos devuelve el valor del RMSE, R^2^y MAE. Para facilitar la interpretación, volvemos a calcular la *tasa de error de predicción*. En primer lugar, tenemos que extraer el valor de RMSE de la lista de resultados del modelo (lo podéis consultar haciendo click sobre el modelo2):\n\n```{r}\nqog2017.red$RMSE.m2<-modelo2$results$RMSE\nhead(qog2017.red)\n```\n\nComos veis, el dataframe contiene ahora nueva columna RMSE.m2. Ya podemos dividir el RMSE por la media de la variable dependiente (cpi)\n\n```{r}\nmean(qog2017.red$RMSE.m2/mean(qog2017.red$cpi))\n```\n\nLa ventaja del método LOOCV es que usamos todos los puntos de datos para reducir el sesgo potencial. La desventaja es que el proceso se repite tantas veces como casos hay, lo que tiene un coste computacional importante si la muestra es muy grande.\n\n## K-fold *cross validation*\n\nEl método de validación cruzada de *k-fold* evalúa el rendimiento del modelo en diferentes subconjuntos de los datos de entrenamiento y luego calcula la tasa de error predictivo promedio. El proceso es el siguiente:\n\n-   Dividir al azar el conjunto de datos en k-subconjuntos (k-folds)\n-   Reservar un subconjunto y entrenar el modelo en todos los demás subconjuntos\n-   Probar el modelo en el subconjunto reservado y registrar el error de predicción\n-   Repetir este proceso hasta que cada uno de los k subconjuntos haya servido como conjunto de prueba.\n-   Calcular el promedio de los errores registrados. Esto se llama el *error de validación* cruzada que sirve como la métrica de rendimiento para el modelo.\n\nLa ventaja más obvia de este método, en comparación con LOOCV, es computacional. Una ventaja menos obvia, pero potencialmente más importante, es que a menudo proporciona estimaciones más precisas de la tasa de error de prueba que LOOCV (James et al., 2014).\n\nPregunta clave: ¿cómo elegir el valor correcto de k? No es difícil ver que un valor pequeño de k (p.ej., k=2) nos lleva a un enfoque parecido al del conjunto de validación que vimos en primer lugar. Por el contrario, valores altos de k (p.ej., k=m) nos lleva al enfoque de LOOCV. En general, usaremos valores intermedios (5, 10, incluso 20)\n\nVamos a hacer un ejemplo con k=10\n\n```{r}\n# Definimos el training control para 10 folders\nset.seed(123) \ntrain.control <- trainControl(method=\"cv\", number=10)  # en este caso, usamos el método \"cv\"\n# Entrenamos el modelo\nmodelo3 <- train(cpi ~., data=qog2017.red, method=\"lm\", trControl=train.control)\nprint(modelo3)\n```\n\nComo en el ejemplo anterior, el modelo calculado a través de “cv” nos devuelve el RMSE, R^2^ y MAE. Al igual que hicimos arriba, extraemos el RMSE para calcular la tasa de error de predicción de la siguiente manera:\n\n```{r}\nqog2017.red$RMSE.m3<-modelo3$results$RMSE         # extraemos RMSE del modelo3\nhead(qog2017.red)                                 # comprobamos que se ha añadido al data.frame\n```\n\n```{r}\nmean(qog2017.red$RMSE.m3/mean(qog2017.red$cpi))   # calculamos la tasa del error de predicción\n```\n","srcMarkdownNoYaml":"\n\n```{r include=FALSE}\nsource(\"00_datos/source.R\")\n```\n\n## Validación del modelo de regresión\n\nHay ocasiones en las que queremos determinar la precisión de un modelo a la hora de predecir nuevas observaciones (que no se han utilizado para construir el modelo). En otras palabras, queremos estimar el error de predicción de nuestro modelo. Con **validación cruzada** nos referimos a un conjunto de métodos para medir el rendimiento de un modelo dado en nuevos conjuntos de datos de prueba.\n\nLa idea básica detrás de las técnicas de validación cruzada es la siguiente:\n\n-   Construir el modelo en un conjunto de datos de entrenamiento (*train set*)\n-   Aplicar el modelo en un nuevo conjunto de datos de prueba para hacer predicciones (*test set*)\n-   Calcular los errores de predicción. Si el modelo funciona bien en el conjunto de datos de prueba (*test set*), entonces es bueno.\n\nÉxisten diferentes métricas para cuantificar la calidad general de los modelos de regresión. Hasta ahora nos hemos centrado en el R^2^, pero hay otros como:\n\n-   El **error cuadrático medio** (RMSE), que mide el error predictivo promedio. Es decir, la diferencia promedio entre los valores observados y los valores predichos por el modelo. Cuanto más bajo sea el RMSE, mejor será el modelo.\n-   El **error absoluto medio** (MAE), una alternativa a RMSE que es menos sensible a los valores atípicos. Corresponde a la diferencia promedio, en términos absolutos, entre los resultados observados y predichos. Cuanto más bajo sea el MAE, mejor será el modelo.\n\nExisten diferentes métodos de validación cruzada para evaluar el rendimiento del modelo. A continuación, vamos a ver algunos de los más sencillos y frecuentes.\n\n## El conjunto de validación\n\nÉl método más sencillo consiste en dividir aleatoriamente los datos en dos conjuntos: un conjunto se usa para entrenar el modelo (train set) y el otro para probalo (test set).\n\nVamos a ver un ejemplo. Para ello, abrimos el dataset QoG2017 (*Quality of Government, 2017*) que ya conocemos. Como en ejemplos anteriores, renombramos nuestras 2 variables de interés:\n\n-   ti_cpi (Transparency International Corruption Perception Index) = cpi\n-   mad_gdppc (GDP per capita) = gdp\n\n```{r}\nqog2017 <- read_dta(\"00_datos/QoG_basic_2017.dta\")\n\ndim(qog2017)\n\nqog2017 <- qog2017 %>%\n  mutate(cpi = ti_cpi,\n         gdp = mad_gdppc)\n\nsummary(qog2017$cpi)\n\nsummary(qog2017$gdp)\n\n```\n\nPara que todo funcione bien **es necesario que la base de datos no contenga NAs**. Para ello, procedemos de la siguiente manera:\n\n-   Creamos un nuevo dataset que incluya únicamente las variables que nos interesan\n-   Eliminamos los casos perdidos usando la función `na.omit()` o `na.exclude()`\n\n```{r}\nmyvars <- c(\"cpi\", \"gdp\")          # creo un vector con las variables de interés\nqog2017.red<-qog2017[myvars]       # creo un nuevo dataframe con las variables de interés\nqog2017.red<- na.omit(qog2017.red) # elimino los casos perdidos del nuevo dataframe\nsummary(qog2017.red)               # compruebo que el nuevo dataset contiene únicamente las variables de interés\ndim(qog2017.red)\n```\n\nUna vez tenemos el dataset preparado, pasamos a crear el conjunto de entrenamiento y test. Hay otras muchas maneras de hacerlo y aquí hemos elegido una sencilla, pero hay otras funciones disponibles en el paquete *caret* o *caTools*.\n\n```{r}\n# Establecemos la semilla para la reproducibilidad (puede ser cualquier número)\nset.seed(1)\n\n# Creamos un id para las filas\nqog2017.red <- qog2017.red %>%\n  rownames_to_column(var = \"row_id\")\n\n# Dividimos el dataset en 70% para entrenamiento y 30% para prueba\ntrain.data <- qog2017.red %>%\n  sample_frac(0.7) # selecciona aleatoriamente el 70% de las filas del dataset.\n\n# El test set son las filas que no están en el train set\ntest.data <- qog2017.red %>%\n  anti_join(train.data, by = \"row_id\") # se usa para obtener el 30% restante (las filas que no están en el set de entrenamiento), asegurando que no haya filas duplicadas.\n```\n\nNota: `set.seet()`establece el número inicial que se usa para generar una secuencia de números aleatorios. De esta manera, nos aseguramos de que obtener el mismo resultado cada vez que se ejecuta el mismo proceso.\n\nA continuación, estimamos el modelo de regresión con los datos de entrenamiento (train.data):\n\n```{r}\nmodelo1 <- lm(cpi ~ gdp, data=train.data)\nprint(modelo1)\n```\n\nUna vez hemos estimado el modelo en el conjunto de entrenamiento, pasamos a hacer la predicción. Es decir, usamos los parámetros obtenidos en el modelo1 para estimar yhat (valores predichos) en el conjunto de prueba (test.data):\n\n```{r}\n# Usamos el modelo para predecir los valores de CPI en test.data y guardamos el resultado en una nueva columna yhat1\ntest.data <- test.data %>%\n  mutate(yhat1 = predict(modelo1, newdata = test.data))\n\n# Visualizamos los primeros valores de la columna de predicciones\nhead(test.data$yhat1)\n```\n\nComo resultado, el dataset tiene ahora 4 columnas. El id, la variable dependiente (*cpi*), la variable independiente (*gdp*) y el valor predicho (*yhat*). Una vez tenemos estos tres valores, ya podemos calcular la calidad general del modelo de regresión.\n\n```{r}\nhead(test.data)\n```\n\nCalculamos el R^2^, el RMSE y el MAE del modelo 1:\n\n```{r}\nlibrary(caret)\ndata.frame(R2.m1 = R2(test.data$yhat1, test.data$cpi),\n           RMSE.m1 = RMSE(test.data$yhat1, test.data$cpi),\n           MAE.m1 = MAE(test.data$yhat1, test.data$cpi))\n```\n\nRMSE y el MAE se miden en la misma escala que la variable dependiente. Para tener una medida más fácilmente interpretable, dividimos RMSE por el valor promedio de la variable dependiente. De esta manera obtendremos la *tasa de error de predicción* que varía entre 0 y 1. La predicción será mejor cuanto menor sea su valor:\n\n```{r}\nRMSE(test.data$yhat1, test.data$cpi)/mean(test.data$cpi)\n```\n\nEste método de validación cruzada es útil cuando tenemos una muestra suficientemente grande para particionar. Una desventaja es que construimos el modelo a partir de fracción del conjunto de datos, posiblemente omitiendo alguna información interesante sobre los datos, lo que nos puede conducir a un mayor sesgo. Por lo tanto, la tasa de error de la prueba puede ser muy variable, dependiendo de qué observaciones se incluyen en el conjunto de entrenamiento y qué observaciones se incluyen en el conjunto de validación.\n\n## Método *Leave-one-out* (LOOCV)\n\nLa validación cruzada dejando uno fuera (método *leave-one-out)* funciona de la siguiente manera:\n\n-   Dejar un único caso fuera y construye el modelo con el resto del dataset (n-1)\n-   Valida el modelo con dicho dato, y guarda el error de predicción asociado\n-   Repite el proceso tantas veces como casos (n) tenemos\n-   Computa el error de predicción total, que es el promedio de todos los errores estimados en cada paso\n\nPara cada uno de los casos de la muestra, hace una regresión con el resto del dataset, y testea esta regresión con el que se ha quedado apartado. Este proceso se repite con todos los casos, calculando el error de todas estas regresiones y la media de ellos. Con esta forma de realizar predicciones, todos los casos son usados tanto en la muestra de entrenamiento como en la de testeo. (*No tiene por qué ser necesariamente un mejor modelo que el anterior*)\n\nVamos a ver un **ejemplo** con nuestros datos:\n\n```{r}\ntrain.control <- trainControl(method=\"LOOCV\") # Con la función trainControl definimos el tipo de método (loocv en este caso)\n# Entrenamos el modelo\nmodelo2 <- train(cpi ~., data=qog2017.red, method=\"lm\", trControl=train.control) # ~. significa que utilice todas las varaibles del dataset, en lugar de tener que escribirlas todas una por una.\nprint(modelo2)\n```\n\nLa función `print()` nos devuelve el resultado del modelo calculado con el método LOOCV. Como veis, nos devuelve el valor del RMSE, R^2^y MAE. Para facilitar la interpretación, volvemos a calcular la *tasa de error de predicción*. En primer lugar, tenemos que extraer el valor de RMSE de la lista de resultados del modelo (lo podéis consultar haciendo click sobre el modelo2):\n\n```{r}\nqog2017.red$RMSE.m2<-modelo2$results$RMSE\nhead(qog2017.red)\n```\n\nComos veis, el dataframe contiene ahora nueva columna RMSE.m2. Ya podemos dividir el RMSE por la media de la variable dependiente (cpi)\n\n```{r}\nmean(qog2017.red$RMSE.m2/mean(qog2017.red$cpi))\n```\n\nLa ventaja del método LOOCV es que usamos todos los puntos de datos para reducir el sesgo potencial. La desventaja es que el proceso se repite tantas veces como casos hay, lo que tiene un coste computacional importante si la muestra es muy grande.\n\n## K-fold *cross validation*\n\nEl método de validación cruzada de *k-fold* evalúa el rendimiento del modelo en diferentes subconjuntos de los datos de entrenamiento y luego calcula la tasa de error predictivo promedio. El proceso es el siguiente:\n\n-   Dividir al azar el conjunto de datos en k-subconjuntos (k-folds)\n-   Reservar un subconjunto y entrenar el modelo en todos los demás subconjuntos\n-   Probar el modelo en el subconjunto reservado y registrar el error de predicción\n-   Repetir este proceso hasta que cada uno de los k subconjuntos haya servido como conjunto de prueba.\n-   Calcular el promedio de los errores registrados. Esto se llama el *error de validación* cruzada que sirve como la métrica de rendimiento para el modelo.\n\nLa ventaja más obvia de este método, en comparación con LOOCV, es computacional. Una ventaja menos obvia, pero potencialmente más importante, es que a menudo proporciona estimaciones más precisas de la tasa de error de prueba que LOOCV (James et al., 2014).\n\nPregunta clave: ¿cómo elegir el valor correcto de k? No es difícil ver que un valor pequeño de k (p.ej., k=2) nos lleva a un enfoque parecido al del conjunto de validación que vimos en primer lugar. Por el contrario, valores altos de k (p.ej., k=m) nos lleva al enfoque de LOOCV. En general, usaremos valores intermedios (5, 10, incluso 20)\n\nVamos a hacer un ejemplo con k=10\n\n```{r}\n# Definimos el training control para 10 folders\nset.seed(123) \ntrain.control <- trainControl(method=\"cv\", number=10)  # en este caso, usamos el método \"cv\"\n# Entrenamos el modelo\nmodelo3 <- train(cpi ~., data=qog2017.red, method=\"lm\", trControl=train.control)\nprint(modelo3)\n```\n\nComo en el ejemplo anterior, el modelo calculado a través de “cv” nos devuelve el RMSE, R^2^ y MAE. Al igual que hicimos arriba, extraemos el RMSE para calcular la tasa de error de predicción de la siguiente manera:\n\n```{r}\nqog2017.red$RMSE.m3<-modelo3$results$RMSE         # extraemos RMSE del modelo3\nhead(qog2017.red)                                 # comprobamos que se ha añadido al data.frame\n```\n\n```{r}\nmean(qog2017.red$RMSE.m3/mean(qog2017.red$cpi))   # calculamos la tasa del error de predicción\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"include-in-header":[{"text":"<style>\n/* Estilos para todo el documento */\nbody {\n  text-align: justify;\n}\n/* Estilos específicos para la tabla de contenidos */\n.toc-actions, .toc .nav, .toc .nav > li > a {\n  text-align: left !important;\n}\n</style>\n"},{"text":"<script>\n// Añadir funcionalidad de zoom para imágenes\ndocument.addEventListener('DOMContentLoaded', function() {\n  document.querySelectorAll('img.zoomable').forEach(function(img) {\n    img.addEventListener('click', function() {\n      this.classList.toggle('zoomed');\n    });\n  });\n});\n</script>\n"}],"output-file":"53_predicciones.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","knitr":{"opts_chunk":{"echo":true,"message":false,"warning":false,"fig.align":"center","out.width":"60%"}},"editor":"visual","theme":{"light":"flatly","dark":"darkly"},"toc-title":"Contenido","title":"Predicciones"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}